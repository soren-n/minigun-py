name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.repository == 'soren-n/minigun-py'

    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install

      - name: Install Python Semantic Release
        run: uv tool install python-semantic-release

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Python Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version_bump }}" != "auto" ]; then
            # Manual release with specific version bump
            uv tool run python-semantic-release version --${{ github.event.inputs.version_bump }} --no-push
            if [ $? -eq 0 ]; then
              VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
              git push origin main --follow-tags
              echo "released=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            else
              echo "released=false" >> $GITHUB_OUTPUT
            fi
          else
            # Automatic release based on conventional commits
            uv tool run python-semantic-release version --no-push
            if [ $? -eq 0 ]; then
              VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
              git push origin main --follow-tags
              echo "released=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            else
              echo "released=false" >> $GITHUB_OUTPUT
            fi
          fi

  build_and_publish:
    name: Build and Publish
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.tag }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install

      - name: Build distribution
        run: uv build

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist/

      - name: Publish to PyPI
        run: uv publish --token ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.release.outputs.tag }} \
            --title "Release ${{ needs.release.outputs.version }}" \
            --generate-notes \
            ./dist/*
