[project]
name = "minigun-soren-n"
version = "2.2.3"
description = "A library for property-based testing of Python programs"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
requires-python = ">=3.12"
authors = [
    { name = "Soren Norbaek", email = "sorennorbaek@gmail.com" }
]
keywords = [
    "property-based testing",
    "testing",
    "python",
]
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Environment :: Console",
]
dependencies = [
    "returns>=0.25.0",
    "tqdm>=4.67.1",
    "typeset-soren-n>=2.0.8",
    "rich>=13.0.0",
]

[project.urls]
Repository = "https://github.com/soren-n/minigun"
Documentation = "https://minigun.readthedocs.io/en/stable/"
"Bug Tracker" = "https://github.com/soren-n/minigun/issues"

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
]
quality = [
    "ruff>=0.6.0",
    "coverage>=7.6.0",
    "pre-commit>=4.3.0",
]

[project.scripts]
minigun-test = "minigun.cli:main"
test = "tests.main:test"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "minigun/__init__.py"

[tool.hatch.build.targets.sdist]
packages = ["minigun"]

[tool.hatch.build.targets.wheel]
packages = ["minigun"]

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

# Quality tools configuration
[tool.ruff]
line-length = 80
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, enforced by ruff formatter at 80 chars
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B011",  # assert False - used for unreachable code paths
    "E402",  # module level import not at top - intentional in some files
    "UP031", # use format specifiers - legacy code style preference
    "B023",  # function definition does not bind loop variable - complex generator pattern
    "E722",  # bare except - intentional for specific error handling
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["minigun"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "minigun/__init__.py:__version__",
]
build_command = "uv build"
dist_path = "dist/"
upload_to_PyPI = false
upload_to_release = true
remove_dist = false

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
exclude_commit_patterns = [
    "^(chore|docs|style|refactor|test|build|ci)(?:\\(.+\\))?:",
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote.token]
env = "GH_TOKEN"
